# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yWkUd_g5BZSJdokglWPsKeKv0uS8hRx9

Append a new number to a list
"""

numbers = [10, 20, 30, 40, 50]
numbers.append(60)
print("Updated List:", numbers)

"""Extend one list with another"""

list1 = [1, 2, 3]
list2 = [4, 5, 6]
list1.extend(list2)
print("Extended List:", list1)

"""Insert "Python" at index 2"""

languages = ["Java", "C++", "JavaScript", "Ruby"]
languages.insert(2, "Python")
print("Updated List:", languages)

"""Remove the first occurrence of 10"""

nums = [10, 20, 30, 10, 40]
nums.remove(10)
print("List after removing 10:", nums)

"""Pop the last element

"""

data = [100, 200, 300, 400]
data.pop()
print("After pop:", data)

"""Count occurrences of 5"""

nums = [5, 10, 5, 20, 5, 30]
print("Number of 5s:", nums.count(5))

"""Sort in ascending and descending order"""

values = [9, 1, 8, 3, 5]
asc = sorted(values)
desc = sorted(values, reverse=True)
print("Ascending:", asc)
print("Descending:", desc)

"""Reverse a list"""

fruits = ["apple", "banana", "cherry"]
fruits.reverse()
print("Reversed List:", fruits)

"""Reverse a list"""

fruits = ["apple", "banana", "cherry"]
fruits.reverse()
print("Reversed List:", fruits)

"""fruits = ["apple", "banana", "cherry"]"""

fruits.reverse()
print("Reversed List:", fruits)


original = [1, 2, 3, 4, 5]
copy_list = original.copy()
copy_list.append(6)
print("Original:", original)
print("Modified Copy:", copy_list)

"""Clear a list"""

greetings = ["hello", "world", "python"]
greetings.clear()
print("Cleared List:", greetings)

"""Tuple and print third fruit"""

fruits = ("apple", "banana", "cherry", "mango", "grape")
print("Third Fruit:", fruits[2])

"""Convert tuple → list → remove → tuple"""

nums = (10, 20, 30, 40, 50)
lst = list(nums)
lst.remove(30)
new_tuple = tuple(lst)
print("Modified Tuple:", new_tuple)

"""Append to tuple? Explanation + workaround"""

# Tuples are immutable – this will raise an error:
# tup = ("A", "B", "C")
# tup.append("D")  # ❌

# Workaround:
tup = ("A", "B", "C")
tup = tup + ("D",)
print("Modified Tuple:", tup)

"""Unpack a tuple"""

t = (100, 200, 300)
a, b, c = t
print("Unpacked:", a, b, c)

"""Count occurrences in a tuple"""

t = (7, 1, 7, 3, 7, 5)
print("Number of 7s:", t.count(7))

"""Function to remove even numbers"""

def remove_even(lst):
    return [x for x in lst if x % 2 != 0]

print(remove_even([1, 2, 3, 4, 5, 6]))

"""Sort list descending without sort()"""

def custom_sort_desc(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] < lst[j]:
                lst[i], lst[j] = lst[j], lst[i]
    return lst

print(custom_sort_desc([5, 2, 9, 1]))

"""Remove duplicates from list"""

nums = [1, 2, 2, 3, 4, 4, 5]
unique = list(set(nums))
print("Unique Elements:", unique)

"""Tuple → list → remove duplicates → tuple

"""

names = ("Alice", "Bob", "Charlie", "Alice", "David")
unique_names = tuple(set(names))
print("Unique Names Tuple:", unique_names)

"""Separate mixed types"""

def separate_types(mixed_list):
    ints = []
    strs = []
    floats = []
    for item in mixed_list:
        if isinstance(item, int):
            ints.append(item)
        elif isinstance(item, float):
            floats.append(item)
        elif isinstance(item, str):
            strs.append(item)
    return ints, strs, floats

mixed = [1, "apple", 3.14, 2, "banana", 2.71]
i, s, f = separate_types(mixed)
print("Integers:", i)
print("Strings:", s)
print("Floats:", f)